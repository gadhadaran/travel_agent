# -*- coding: utf-8 -*-
"""travelagent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rpgTiBtN7XwlUx9OykqUeVNHPyyaNZrD
"""

!pip install langchain-community google-generativeai langchain-google-genai serpapi python-dotenv

import os
from langchain.tools import Tool
from langchain_google_genai import GoogleGenerativeAI
from langchain.agents import initialize_agent, AgentType
from langchain.utilities import SerpAPIWrapper
from dotenv import load_dotenv

GOOGLE_API_KEY="AIzaSyDWI8p0j80zBaptmQ7U8buWw67un4mxChw"
SERPAPI_KEY="1b47079153b79f0cb4ec2707a8ba542fe5431a11fc03dd4fa2284712b696468b"

!export GOOGLE_API_KEY="AIzaSyDWI8p0j80zBaptmQ7U8buWw67un4mxChw"

# Commented out IPython magic to ensure Python compatibility.
# %env GOOGLE_API_KEY="AIzaSyDWI8p0j80zBaptmQ7U8buWw67un4mxChw"

import os
import google.generativeai as genai
from dotenv import load_dotenv

# Load .env file
load_dotenv()

# Manually set API key if missing
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    os.environ["GOOGLE_API_KEY"] = "AIzaSyCKze_raSjOvQI2DOXEpbzO79NpnQteP3s"

# Configure Gemini API
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Verify if the key is loaded
if not os.getenv("GOOGLE_API_KEY"):
    raise ValueError("❌ GOOGLE_API_KEY is still missing! Set it manually.")

import os
print(os.getenv("GOOGLE_API_KEY"))

!export SERPAPI_KEY="1b47079153b79f0cb4ec2707a8ba542fe5431a11fc03dd4fa2284712b696468b"
!set SERPAPI_KEY="1b47079153b79f0cb4ec2707a8ba542fe5431a11fc03dd4fa2284712b696468b"

# Commented out IPython magic to ensure Python compatibility.
# %env SERPAPI_KEY="1b47079153b79f0cb4ec2707a8ba542fe5431a11fc03dd4fa2284712b696468b"

import os
print(os.getenv("SERPAPI_KEY"))  # Should print your actual key

from dotenv import load_dotenv
import os

load_dotenv()  # Load environment variables

SERPAPI_KEY = os.getenv("SERPAPI_KEY")
if not SERPAPI_KEY:
    raise ValueError("Missing SERPAPI_KEY. Set it in your .env file or environment variables.")

# Initialize SerpAPI wrapper
def search_flights(destination, date):
    search = SerpAPIWrapper(serpapi_api_key=SERPAPI_KEY)
    return search.run(f"flights to {destination} on {date}")

def search_hotels(destination, checkin_date, checkout_date):
    search = SerpAPIWrapper(serpapi_api_key=SERPAPI_KEY)
    return search.run(f"hotels in {destination} from {checkin_date} to {checkout_date}")

def get_itinerary(destination, days):
    search = SerpAPIWrapper(serpapi_api_key=SERPAPI_KEY)
    return search.run(f"best itinerary for {days} days in {destination}")

def track_expenses(expenses):
    total = sum(expenses)
    return f"Total expenses so far: ${total}"

# Define tools
flight_tool = Tool(
    name="Flight Search",
    func=search_flights,
    description="Finds flight details for a given destination and date."
)

hotel_tool = Tool(
    name="Hotel Search",
    func=search_hotels,
    description="Finds hotels based on location and check-in/out dates."
)

itinerary_tool = Tool(
    name="Itinerary Planner",
    func=get_itinerary,
    description="Generates a detailed itinerary for a given destination."
)

expense_tool = Tool(
    name="Expense Tracker",
    func=track_expenses,
    description="Tracks travel expenses."
)

# Initialize Google Gemini AI
import google.generativeai as genai
genai.configure(api_key="AIzaSyDWI8p0j80zBaptmQ7U8buWw67un4mxChw")  # Replace with your actual API key
llm = GoogleGenerativeAI(model="gemini-pro")

# Initialize agent
tools = [flight_tool, hotel_tool, itinerary_tool, expense_tool]

agent_executor = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True
)

# Initialize Google Gemini AI
import google.generativeai as genai
import os

# Get API key from environment variable
google_api_key = os.environ.get("AIzaSyDWI8p0j80zBaptmQ7U8buWw67un4mxChw")

# Configure genai with the API key
genai.configure(api_key=google_api_key)

llm = GoogleGenerativeAI(model="gemini-pro")

# Initialize agent
tools = [flight_tool, hotel_tool, itinerary_tool, expense_tool]

agent_executor = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True
)

# Test the agent
trip_destination = "Paris"
trip_days = 5
trip_date = "2025-06-10"
checkin_date = "2025-06-10"
checkout_date = "2025-06-15"
expenses = [500, 200, 150]

# ipython-input-37-4ebd276d08ca
print("\n--- Flight Details ---\n", agent_executor.run(f"Find flights to {trip_destination} on {trip_date}")) # Changed 'invoke' to 'run'
print("\n--- Hotel Details ---\n", agent_executor.run(f"Find hotels in {trip_destination} from {checkin_date} to {checkout_date}")) # Changed 'invoke' to 'run'
print("\n--- Itinerary ---\n", agent_executor.run(f"Generate a {trip_days}-day itinerary for {trip_destination}")) # Changed 'invoke' to 'run'
print("\n--- Expense Tracking ---\n", agent_executor.run(f"Calculate total expenses for {expenses}")) # Changed 'invoke' to 'run'

print("\n--- Flight Details ---\n", agent_executor.invoke({
    "input": "Find flights",
    "destination": trip_destination,
    "date": trip_date
}))

print("\n--- Hotel Details ---\n", agent_executor.invoke({
    "input": "Find hotels",
    "destination": trip_destination,
    "checkin_date": checkin_date,
    "checkout_date": checkout_date
}))

print("\n--- Itinerary ---\n", agent_executor.invoke({
    "input": "Generate itinerary",
    "destination": trip_destination,
    "days": trip_days
}))

print("\n--- Expense Tracking ---\n", agent_executor.invoke({
    "input": "Calculate expenses",
    "expenses": expenses
}))

!pip install langchain google-search-results openai

# Commented out IPython magic to ensure Python compatibility.
# %env SERPAPI_KEY="1b47079153b79f0cb4ec2707a8ba542fe5431a11fc03dd4fa2284712b696468b"

import os
from dotenv import load_dotenv

load_dotenv()  # Load API keys from .env file

SERPAPI_API_KEY = os.getenv("SERPAPI_KEY")
if not SERPAPI_API_KEY:
    raise ValueError("❌ Missing SERPAPI_API_KEY! Set it in your .env file or environment variables.")

from langchain.tools import Tool
from langchain.utilities import SerpAPIWrapper

def search_flights(destination: str, date: str):
    """Search for flights using SerpAPI Google Flights."""
    search = SerpAPIWrapper(params={
        "engine": "google_flights",
        "q": f"Flights to {destination} on {date}",
        "api_key": SERPAPI_API_KEY
    })
    return search.run()

def search_hotels(destination: str, checkin_date: str, checkout_date: str):
    """Search for hotels using SerpAPI Google Hotels."""
    search = SerpAPIWrapper(params={
        "engine": "google_hotels",
        "q": f"Hotels in {destination} from {checkin_date} to {checkout_date}",
        "api_key": SERPAPI_API_KEY
    })
    return search.run()

flight_tool = Tool(
    name="Flight Search",
    func=search_flights,
    description="Finds flights to a destination on a given date using SerpAPI Google Flights."
)

hotel_tool = Tool(
    name="Hotel Search",
    func=search_hotels,
    description="Finds hotels in a destination for a given date range using SerpAPI Google Hotels."
)

from langchain.chat_models import ChatOpenAI
from langchain.agents import initialize_agent, AgentType

llm = ChatOpenAI(temperature=0.5)  # You can use Gemini, OpenAI, or Mistral here

tools = [flight_tool, hotel_tool]

agent_executor = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True
)

!pip install mistralai langchain-community

!pip install langchain_mistralai

from mistralai.client import MistralClient
#from langchain.chat_models import ChatMistral  # Use this if LangChain has Mistral support
import os

# Instead of:
# from langchain.chat_models import ChatMistral

# Use:
from langchain_mistralai.chat_models import ChatMistral  # Import from langchain_mistralai

# Commented out IPython magic to ensure Python compatibility.

# %env MISTRAL_API_KEY="jA2tNJrbTvxO5gYhLERRwelSI9T4Dczt"

import os
from dotenv import load_dotenv

load_dotenv()

MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
if not MISTRAL_API_KEY:
    raise ValueError("❌ Missing MISTRAL_API_KEY! Set it in your .env file or environment variables.")

from langchain_mistralai.chat_models import ChatMistral
from langchain.agents import initialize_agent, AgentType

llm = ChatMistral(
    model="mistral-large",  # Choose between "mistral-small", "mistral-medium", or "mistral-large"
    temperature=0.5,
    api_key=MISTRAL_API_KEY
)

tools = [flight_tool, hotel_tool]

agent_executor = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True
)

